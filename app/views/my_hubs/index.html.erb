<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>My Hub</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  
  <!-- Google Font -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap">

  <!-- vis-network & Compromise for visualization -->
  <script src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
  <script src="https://unpkg.com/compromise"></script>

  <style>
    /* GLOBAL STYLES */
    * { margin: 0; padding: 0; box-sizing: border-box; }
    html, body { 
      height: 100%; 
      font-family: 'Inter', sans-serif; 
      background: linear-gradient(135deg, #0c0f17, #000); 
      color: #fff; 
      overflow-x: hidden;
    }

    /* FIXED TOP NAVIGATION BAR */
    .top-nav {
      position: fixed;
      top: 0; left: 0;
      width: 100%;
      height: 60px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 2rem;
      background-color: #14161c;
      z-index: 100;
    }
    .top-nav .logo { 
      font-size: 1.5rem; 
      font-weight: 700; 
      color: #fff; 
    }
    .top-nav .nav-links a, .top-nav .actions a {
      margin-right: 1.5rem;
      text-decoration: none;
      color: #aaa;
      font-weight: 500;
      transition: color 0.2s ease;
    }
    .top-nav .nav-links a:hover, .top-nav .actions a:hover { color: #fff; }
    .nav-btn {
      padding: 0.5rem 1rem;
      border: 2px solid #5865f2;
      border-radius: 6px;
      color: #fff;
      font-weight: 500;
      transition: background-color 0.3s ease;
      text-decoration: none;
    }
    .nav-btn:hover { background-color: #5865f2; }

    /* CONTENT STRUCTURE */
    .content {
      display: flex;
      flex: 1;
      padding-top: 60px; /* space for fixed nav */
      height: calc(100vh - 60px);
    }

    /* SIDEBAR */
    .sidebar {
      width: 250px;
      background-color: #14161c;
      padding: 1rem;
      overflow-y: auto;
      height: 100%;
    }
    .sidebar h2 { font-size: 1.2rem; margin-bottom: 1rem; }
    .sidebar ul { list-style: none; }
    .sidebar ul li { margin-bottom: 0.75rem; }
    .sidebar a { text-decoration: none; color: #aaa; transition: color 0.2s ease; }
    .sidebar a:hover { color: #fff; }

    /* MAIN CONTENT AREA (Grid Cards) */
    .main-content {
      flex: 1;
      padding: 1rem 2rem;
      overflow-y: auto;
      position: relative;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }
    .grid-background::before {
      content: "";
      position: absolute;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background-image: radial-gradient(#ccc 1px, transparent 1px), radial-gradient(#ccc 1px, transparent 1px);
      background-position: 0 0, 10px 10px;
      background-size: 20px 20px;
      opacity: 0.2;
      z-index: -1;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
      gap: 1rem;
      z-index: 2;
    }
    .card {
      background-color: #1a1f2a;
      border-radius: 8px;
      padding: 1rem;
      text-decoration: none;
      color: #fff;
      transition: background-color 0.3s ease, transform 0.2s ease;
      text-align: center;
    }
    .card:hover { background-color: #2a2f3a; transform: translateY(-2px); }
    .card-icon { font-size: 2rem; margin-bottom: 0.75rem; }
    .card-title { font-weight: 600; margin-bottom: 0.5rem; }
    .card-desc { font-size: 0.9rem; color: #ccc; }

    /* CENTERED GRAPH SECTION */
    .graph-section-wrapper {
      display: flex;
      flex: 1;
      justify-content: center;
      align-items: center;
      padding: 2rem;
    }
    #graph-section {
      width: 85%;
      height: 80vh;
      background: #1a1f2a;
      border: 1px solid #34495e;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      position: relative;
    }
    #graph-section::before {
      content: "";
      position: absolute;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background-image: radial-gradient(#ccc 1px, transparent 1px), radial-gradient(#ccc 1px, transparent 1px);
      background-position: 0 0, 10px 10px;
      background-size: 20px 20px;
      opacity: 0.2;
      z-index: -1;
    }
    .card-avatar {
  width: 70px;       /* Adjust size as needed */
  height: 70px;      /* Adjust size as needed */
  border-radius: 50%; /* Makes the image circular */
  object-fit: cover;  /* Ensures the image fills the container */
  margin-bottom: 10px;
}

    #network {
      width: 100%;
      height: 100%;
      border-radius: 10px;
      background: #20252f;
      border: 2px solid #5865f2;
      margin-top: 20px;
    }
    #fullscreenButton {
      margin-top: 15px;
      padding: 10px 20px;
      border-radius: 6px;
      background-color: #5865f2;
      color: white;
      border: none;
      cursor: pointer;
    }
    #fullscreenButton:hover { background-color: #4752d0; }
    #legend {
      margin-top: 10px;
      font-size: 14px;
      color: #6c757d;
    }

    /* CHATBOX */
    #chat-container {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 350px;
      background: #1a1f2a;
      border-radius: 10px;
      padding: 15px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      z-index: 200;
    }
    #chat-log { 
      height: 250px; 
      overflow-y: auto; 
      padding: 10px; 
      background-color: #20252f; 
      border-radius: 5px; 
      margin-bottom: 10px; 
      color: #fff; 
    }
    #user-input { 
      width: 70%; 
      padding: 10px; 
      border-radius: 5px; 
      background-color: #2a2f3a; 
      border: none; 
      color: white; 
    }
    #send-button { 
      width: 25%; 
      padding: 10px; 
      border-radius: 5px; 
      border: none; 
      background-color: #5865f2; 
      color: white; 
      cursor: pointer; 
    }
    #send-button:hover { background-color: #4752c4; }
  </style>
</head>
<body>
  <!-- TOP NAVIGATION -->
  <header class="top-nav">
    <div class="nav-links">
      <a href="/" class="nav-btn">‚Üê Leave Hub</a>
    </div>
    <div class="actions">
      <a href="notes" class="nav-btn">+ New Note</a>
    </div>
  </header>

  <!-- MAIN CONTENT STRUCTURE -->
  <div class="content">
    <!-- SIDEBAR -->
    <aside class="sidebar">
      <h2>Categories</h2>
      <ul>
        <li><a href="#">All</a></li>
        <li><a href="#">Marketing</a></li>
        <li><a href="#">Productivity</a></li>
        <li><a href="#">Sales</a></li>
        <li><a href="#">Finance</a></li>
        <li><a href="#">Communication</a></li>
        <li><a href="#">Cloud Services</a></li>
        <li><a href="#">Security</a></li>
        <li><a href="#">Design</a></li>
        <li><a href="#">Development</a></li>
        <li><a href="#">Human Resources</a></li>
        <li><a href="#">Customer Support</a></li>
        <li><a href="#">E-commerce</a></li>
        <li><a href="#">Social Media</a></li>
      </ul>

      </br>
      </br>

      <%= link_to "Log Out", session_path, method: :delete, class: "logout-btn", data: { turbo: false } %>
    </aside>

 <!-- MAIN GRID CONTENT (Sidebar Cards) -->
<main class="main-content grid-background">
  <div class="grid" style="grid-template-columns: repeat(3, 1fr);">
    <!-- Example card for Alice Brown -->
    
    <a href="/profiles/1" class="card">
      <img src="https://miro.medium.com/v2/resize:fit:1400/1*HNDhCUJGGFUMdhSeKteWJA.png" alt="Alice Brown Avatar" class="card-avatar">
      <div class="card-title">Alice Brown</div>
      <div class="card-desc">HR Specialist</div>
    </a>
    <!-- Example card for Bob Johnson -->
    <a href="/profiles/2" class="card">
      <img src="https://easy-peasy.ai/cdn-cgi/image/quality=80,format=auto,width=700/https://media.easy-peasy.ai/b2e29994-2acc-464b-b2d0-20036b4f41cb/cd880067-5ea7-4de1-8be6-46575d608796.png" alt="Bob Johnson Avatar" class="card-avatar">
      <div class="card-title">Bob Johnson</div>
      <div class="card-desc">Finance Expert</div>
    </a>
    <!-- Example card for Catherine Li -->
    <a href="/profiles/3" class="card">
      <img src="https://images.tech.co/wp-content/uploads/2024/04/17123134/AdobeStock_657290983-1-min.jpeg" alt="Catherine Li Avatar" class="card-avatar">
      <div class="card-title">Catherine Li</div>
      <div class="card-desc">Marketing Specialist</div>
    </a>
    <!-- Additional 7 cards -->
    <a href="/profiles/4" class="card">
      <img src="https://cdn.prod.website-files.com/5fd2ba952bcd68835f2c8254/6789575e8faf4908de0d32f4_20916742-0.webp" alt="David Smith Avatar" class="card-avatar">
      <div class="card-title">David Smith</div>
      <div class="card-desc">Product Manager</div>
    </a>
    <a href="/profiles/5" class="card">
      <img src="https://cdn.prod.website-files.com/5fd2ba952bcd68835f2c8254/65a5cf3ebf8d7e43e8c77962_ai-generated-headshot-example.webp" alt="Emma Davis Avatar" class="card-avatar">
      <div class="card-title">Emma Davis</div>
      <div class="card-desc">UX Designer</div>
    </a>
    <a href="/profiles/6" class="card">
      <img src="https://www.denverheadshotco.com/wp-content/uploads/2023/06/dhc-coporate-headshots-hero-1.jpg" alt="Frank Miller Avatar" class="card-avatar">
      <div class="card-title">Frank Miller</div>
      <div class="card-desc">Software Developer</div>
    </a>
    <a href="/profiles/7" class="card">
      <img src="https://www.briefcasecoach.com/wp-content/uploads/2024/09/Screen-Shot-2024-09-04-at-3.08.38-PM-1-1024x905.png" alt="Grace Lee Avatar" class="card-avatar">
      <div class="card-title">Grace Lee</div>
      <div class="card-desc">Operations Lead</div>
    </a>
    <a href="/profiles/8" class="card">
      <img src="https://image13.photobiz.com/10309/12_20240417102146_12845125_large.jpg" alt="Henry Wilson Avatar" class="card-avatar">
      <div class="card-title">Henry Wilson</div>
      <div class="card-desc">Data Scientist</div>
    </a>
    <a href="/profiles/9" class="card">
      <img src="https://brightspark-consulting.com/wp-content/uploads/2023/05/Screenshot-2023-05-05-at-11.55.47.png" alt="Isabella Martinez Avatar" class="card-avatar">
      <div class="card-title">Isabella Martinez</div>
      <div class="card-desc">Sales Director</div>
    </a>
    <a href="/profiles/10" class="card">
      <img src="https://pbs.twimg.com/profile_images/1080456670684332032/7-4OAu7I_400x400.jpg" alt="Jack Thompson Avatar" class="card-avatar">
      <div class="card-title">Des Traynor</div>
      <div class="card-desc">Unpaid Intern</div>
    </a>
  </div>
</main>


  <!-- CENTERED GRAPH SECTION -->
  <div class="content">
    <section id="graph-section" class="grid-background">
      <h2 style="color:#fff; text-align: center;">Classifier & Spread Out Network</h2>
      <p style="text-align: center;">Note: Hello!</p>
      <!-- Removed file input: graph data is auto-loaded from the server -->
      <div id="tableContainer" style="width: 100%; max-width: 600px;"></div>
      <button id="fullscreenButton">Toggle Fullscreen</button>
      <div id="network" style="margin-top: 20px;"></div>
      <div id="legend"></div>
    </section>
  </div>

  <!-- CHATBOX SECTION -->
  <div id="chat-container">
    <div id="chat-log"></div>
    <input type="text" id="user-input" placeholder="Ask me something...">
    <button id="send-button">Send</button>
    <button id="microphone-button-on" style="display: none">üé§</button>
    <button id="microphone-button-off">üîá</button>
  </div>


  <script>
    // Chatbox script
    const chatLog = document.getElementById('chat-log');
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');

    function writeLine(text) {
      const messageDiv = document.createElement('div');
      messageDiv.textContent = text;
      chatLog.appendChild(messageDiv);
      chatLog.scrollTop = chatLog.scrollHeight;
    }

    function appendMessage(sender, text) {
      writeLine(`${sender === 'user' ? 'You' : 'Bot'}: ${text}`);
    }

    async function sendMessage(message) {
      appendMessage('user', message);
      try {
        const response = await fetch('/my_hub/chat_message', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({ message: message })
        });
        const data = await response.json();
        appendMessage('bot', data.reply || 'No reply received.');
      } catch (error) {
        appendMessage('bot', `Error: ${error.message}`);
      }
    }

    sendButton.addEventListener('click', () => {
      const message = userInput.value.trim();
      if (message) {
        sendMessage(message);
        userInput.value = '';
      }
    });

    userInput.addEventListener('keyup', (event) => {
      if (event.key === 'Enter') sendButton.click();
    });
  </script>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const baseFontSize = 24;
    const maxFontSize = 48;

    // Fullscreen button functionality
    document.getElementById('fullscreenButton').addEventListener('click', () => {
      const networkContainer = document.getElementById('network');
      if (!document.fullscreenElement) {
        if (networkContainer.requestFullscreen) {
          networkContainer.requestFullscreen();
        } else if (networkContainer.mozRequestFullScreen) {
          networkContainer.mozRequestFullScreen();
        } else if (networkContainer.webkitRequestFullscreen) {
          networkContainer.webkitRequestFullscreen();
        } else if (networkContainer.msRequestFullscreen) {
          networkContainer.msRequestFullscreen();
        }
      } else {
        if (document.exitFullscreen) {
          document.exitFullscreen();
        } else if (document.mozCancelFullScreen) {
          document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) {
          document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) {
          document.msExitFullscreen();
        }
      }
    });

    // Automatically load graph data from the server endpoint
    async function loadGraphData() {
      try {
        const response = await fetch('<%= my_hub_graph_data_path %>');
        if (!response.ok) {
          console.error("Failed to load graph data:", response.statusText);
          return;
        }
        const results = await response.json();
        const globalFreq = {};
        results.forEach(doc => {
          doc.keywords.forEach(obj => {
            const kw = obj.keyword;
            globalFreq[kw] = (globalFreq[kw] || 0) + 1;
          });
        });
        results.forEach(doc => {
          doc.tags = doc.keywords.filter(obj => globalFreq[obj.keyword] > 1).map(obj => obj.keyword);
        });
        updateTable(results);
        buildNetwork(results, globalFreq);
      } catch (error) {
        console.error("Error loading graph data:", error);
      }
    }

    // Update the HTML table with document details.
    function updateTable(docs) {
      let html = '<table><thead><tr><th>File Name</th><th>Proper Noun Keywords</th><th>Tags</th><th>Classification</th></tr></thead><tbody>';
      docs.forEach(doc => {
        const keywordText = doc.keywords.map(obj => obj.keyword).join(', ');
        html += `<tr>
                   <td>${doc.name}</td>
                   <td>${keywordText}</td>
                   <td>${doc.tags.join(', ') || 'None'}</td>
                   <td>${doc.classification}</td>
                 </tr>`;
      });
      html += '</tbody></table>';
      document.getElementById('tableContainer').innerHTML = html;
    }

    function fadeIn(nodeId, nodes) {
      let opacity = 0, step = 0.1;
      const interval = setInterval(() => {
        opacity += step;
        if (opacity >= 1) { opacity = 1; clearInterval(interval); }
        nodes.update({ id: nodeId, opacity: opacity });
      }, 50);
    }

    function buildNetwork(docs, globalFreq) {
      const nodes = new vis.DataSet([]);
      const edges = new vis.DataSet([]);
      const keywordNodes = {};
      const classificationNodes = {};
      let docId = 1, kwId = 1001, clsId = 2001;
      docs.forEach(doc => {
        const currentDocId = docId++;
        nodes.add({ 
          id: currentDocId, 
          label: doc.name, 
          fullLabel: doc.name, 
          shape: 'box', 
          color: { background: '#AED6F1', border: '#5DADE2' },
          font: { size: baseFontSize },
          type: 'document',
          opacity: 1,
          widthConstraint: { minimum: 0, maximum: 400 },
          heightConstraint: { minimum: 0, maximum: 120 },
          shadow: { enabled: true, color: 'rgba(0,0,0,0.2)', size: 5, x: 3, y: 3 }
        });
        doc.keywords.forEach(obj => {
          const kw = obj.keyword;
          const count = obj.count;
          if (!(kw in keywordNodes)) {
            const isTag = globalFreq[kw] > 1;
            keywordNodes[kw] = kwId;
            nodes.add({
              id: kwId,
              label: kw,
              fullLabel: kw,
              shape: 'ellipse',
              color: isTag 
                      ? { background: '#F1948A', border: '#E74C3C' }
                      : { background: '#F9E79F', border: '#F7DC6F' },
              font: { size: baseFontSize },
              type: 'keyword',
              opacity: 1,
              widthConstraint: { minimum: 0, maximum: 150 },
              heightConstraint: { minimum: 0, maximum: 10 }
            });
            kwId++;
          }
          edges.add({ 
            from: currentDocId, 
            to: keywordNodes[kw],
            width: 1 + Math.log(count + 1)
          });
        });
        
        let cls = doc.classification || "";
        if (!(cls in classificationNodes)) {
          classificationNodes[cls] = clsId;
          nodes.add({
            id: clsId,
            label: cls,
            fullLabel: cls,
            shape: 'diamond',
            color: { background: '#C39BD3', border: '#AF7AC5' },
            font: { size: baseFontSize },
            type: 'classification',
            opacity: 1,
            widthConstraint: { minimum: 120 },
            heightConstraint: { minimum: 40 }
          });
          clsId++;
        }
        edges.add({ from: currentDocId, to: classificationNodes[cls], width: 1 });
      });
      const container = document.getElementById('network');
      const data = { nodes: nodes, edges: edges };
      const options = {
        layout: { improvedLayout: true },
        physics: {
          forceAtlas2Based: {
            gravitationalConstant: -2000,
            centralGravity: 0,
            springLength: 3000,
            springConstant: 0.05,
            avoidOverlap: 2
          },
          maxVelocity: 50,
          timestep: 0.35,
          stabilization: { iterations: 500 }
        },
        interaction: { hover: true }
      };
      const network = new vis.Network(container, data, options);
      let scheduledUpdate = false;
      let pendingScale = network.getScale();
      function scheduleUpdate(scale) {
        pendingScale = scale;
        if (!scheduledUpdate) {
          scheduledUpdate = true;
          requestAnimationFrame(() => {
            updateNodeDisplay(pendingScale);
            scheduledUpdate = false;
          });
        }
      }
      function updateNodeDisplay(scale) {
        let effectiveFontSize = Math.min(baseFontSize / scale, maxFontSize);
        const allNodes = nodes.get();
        allNodes.forEach(function(node) {
          let update = { id: node.id, font: { size: effectiveFontSize } };
          if (node.type === 'keyword' && scale < 0.8) { update.hidden = true; }
          else { update.hidden = false; }
          if (node.type === 'document' && scale < 0.6) { update.label = ""; }
          else { update.label = node.fullLabel; }
          nodes.update(update);
          if (!update.hidden) {
            let currentOpacity = nodes.get(node.id).opacity;
            if (!currentOpacity || currentOpacity < 1) {
              nodes.update({ id: node.id, opacity: 0 });
              fadeIn(node.id, nodes);
            }
          }
        });
      }
      updateNodeDisplay(network.getScale());
      network.on('zoom', params => { scheduleUpdate(params.scale); });
      network.on('dragEnd', () => { scheduleUpdate(network.getScale()); });
      network.once('stabilizationIterationsDone', () => {
        const totalNodes = nodes.length;
        const legendDiv = document.getElementById('legend');
        legendDiv.innerHTML = totalNodes > 50 
          ? "Large graph (" + totalNodes + " nodes). Zoom and pan to explore details." 
          : "";
      });
    }

    // Automatically load graph data from the server endpoint
    loadGraphData();
    async function loadGraphData() {
      try {
        const response = await fetch('<%= my_hub_graph_data_path %>');
        if (!response.ok) {
          console.error("Failed to load graph data:", response.statusText);
          return;
        }
        const results = await response.json();
        const globalFreq = {};
        results.forEach(doc => {
          doc.keywords.forEach(obj => {
            const kw = obj.keyword;
            globalFreq[kw] = (globalFreq[kw] || 0) + 1;
          });
        });
        results.forEach(doc => {
          doc.tags = doc.keywords.filter(obj => globalFreq[obj.keyword] > 1).map(obj => obj.keyword);
        });
        updateTable(results);
        buildNetwork(results, globalFreq);
      } catch (error) {
        console.error("Error loading graph data:", error);
      }
    }
  });
</script>

